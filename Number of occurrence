class Solution {
  public:
  
  
    int solveForLeft(vector<int>& nums, int target)
    {
        int start = 0; 
        int end = nums.size()-1;
        int ans = -1;

        while(start <= end)
        {
            int mid = start + (end-start)/2;

            if(nums[mid] == target)
            {
                ans = mid;
                end = mid - 1;
            }

            else if(target < nums[mid])
            {
                end = mid - 1;
            }
            else
            {
                start = mid+1;
            }
        }

        return ans ;
    }

    int solveForRight(vector<int>& nums, int target)
    {
        int start = 0; 
        int end = nums.size()-1;
        int ans = -1;

        while(start <= end)
        {
            int mid = start + (end-start)/2;

            if(nums[mid] == target)
            {
                ans = mid;
                start = mid + 1;
            }

            else if(target < nums[mid])
            {
                end = mid - 1;
            }
            else
            {
                start = mid+1;
            }
        }

        return ans ;
    }
    int countFreq(vector<int>& arr, int target) {
        // code here
        // int left = lower_bound(arr.begin(),arr.end(),target);
        // int right = upper_bound(arr.begin(),arr.end(),target);
        
        // int leftans =  left - arr.begin();
        // int rightans = right - arr.begin();
        
        int left = solveForLeft(arr,target);
        
        int right = solveForRight(arr,target);
        if(left == -1 && right == -1)
        {
            return 0;
        }
        
        int ans = right - left +1;
        return ans;
        
        
    }
    
};
